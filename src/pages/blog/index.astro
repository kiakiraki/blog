---
import Layout from '@/layouts/Layout.astro';
import FormattedDate from '@/components/FormattedDate.astro';
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';
import { CATEGORIES } from '@/consts';
import type { Category } from '@/consts';

export const prerender = true;

const posts = (await getCollection('blog')).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

// カテゴリ別の記事数を計算
const categoryCounts = CATEGORIES.reduce((acc, category) => {
  acc[category] = posts.filter(post => post.data.category === category).length;
  return acc;
}, {} as Record<Category, number>);
---

<Layout description="趣味についての雑多な記録" title="ブログ記事一覧">
  <div class="container mx-auto px-4 py-16">
    <div class="max-w-6xl mx-auto">
      <!-- Header -->
      <div class="text-center mb-16">
        <h1 id="page-title" class="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-6">
          ブログ記事一覧
        </h1>
        <p class="text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto">
          趣味についての雑多な記録
        </p>
        <div class="w-24 h-1 bg-primary-600 mx-auto mt-6"></div>
      </div>

      <!-- Category Filter -->
      <div class="mb-12">
        <div class="flex flex-wrap justify-center gap-3">
          <button
            class="category-filter-btn px-4 py-2 rounded-full text-sm font-medium transition-colors duration-200 bg-primary-600 text-white"
            data-category=""
          >
            すべて ({posts.length})
          </button>
          {CATEGORIES.map(category => (
            <button
              class="category-filter-btn px-4 py-2 rounded-full text-sm font-medium transition-colors duration-200 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700"
              data-category={category}
            >
              {category} ({categoryCounts[category]})
            </button>
          ))}
        </div>
      </div>

      <!-- Posts Grid -->
      <div id="posts-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {
          posts.map(post => (
            <article class={`post-card card group hover:shadow-xl transition-all duration-300`} data-category={post.data.category}>
              <a class="block" href={`/blog/${post.id}/`}>
                {post.data.heroImage && (
                  <div class="mb-4 overflow-hidden rounded-lg">
                    <Image
                      alt={post.data.title}
                      class="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300"
                      height={225}
                      src={post.data.heroImage}
                      width={400}
                    />
                  </div>
                )}

                <div class="space-y-3">
                  <h2 class="text-xl font-semibold text-gray-900 dark:text-white group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors line-clamp-2">
                    {post.data.title}
                  </h2>

                  {post.data.description && (
                    <p class="text-gray-600 dark:text-gray-300 text-sm line-clamp-3">
                      {post.data.description}
                    </p>
                  )}

                  <div class="flex items-center justify-between pt-2">
                    <div class="text-sm text-gray-500 dark:text-gray-300">
                      <FormattedDate date={post.data.pubDate} />
                    </div>

                    <span class="text-primary-600 dark:text-primary-400 text-sm font-medium group-hover:text-primary-700 dark:group-hover:text-primary-300 transition-colors">
                      続きを読む →
                    </span>
                  </div>

                  <div class="mt-3">
                    <span class="inline-block bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 text-xs px-2 py-1 rounded-full">
                      {post.data.category}
                    </span>
                  </div>
                </div>
              </a>
            </article>
          ))
        }
      </div>

      <!-- No Posts Message -->
      <div id="no-posts-message" class="text-center py-16 hidden">
        <p class="text-gray-600 dark:text-gray-300 text-lg">
          この条件に合う記事が見つかりません。
        </p>
      </div>
    </div>
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const filterButtons = document.querySelectorAll('.category-filter-btn');
    const postCards = document.querySelectorAll('.post-card');
    const noPostsMessage = document.getElementById('no-posts-message');
    const pageTitle = document.getElementById('page-title');

    // URLパラメータから初期カテゴリを取得
    const urlParams = new URLSearchParams(window.location.search);
    const initialCategory = urlParams.get('category');
    
    if (initialCategory) {
      filterPosts(initialCategory);
      updateActiveButton(initialCategory);
      updatePageTitle(initialCategory);
    }

    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        const category = button.getAttribute('data-category');
        filterPosts(category);
        updateActiveButton(category);
        updatePageTitle(category);
        updateURL(category);
      });
    });

    function filterPosts(category) {
      let visibleCount = 0;
      
      postCards.forEach(card => {
        const postCategory = card.getAttribute('data-category');
        
        if (!category || category === '' || postCategory === category) {
          card.style.display = 'block';
          visibleCount++;
        } else {
          card.style.display = 'none';
        }
      });

      // メッセージの表示/非表示
      if (visibleCount === 0) {
        noPostsMessage?.classList.remove('hidden');
      } else {
        noPostsMessage?.classList.add('hidden');
      }
    }

    function updateActiveButton(activeCategory) {
      filterButtons.forEach(button => {
        const buttonCategory = button.getAttribute('data-category') || '';
        
        if (buttonCategory === activeCategory) {
          button.className = 'category-filter-btn px-4 py-2 rounded-full text-sm font-medium transition-colors duration-200 bg-primary-600 text-white';
        } else {
          button.className = 'category-filter-btn px-4 py-2 rounded-full text-sm font-medium transition-colors duration-200 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700';
        }
      });
    }

    function updatePageTitle(category) {
      if (pageTitle) {
        if (category && category !== '') {
          pageTitle.textContent = `${category}の記事`;
        } else {
          pageTitle.textContent = 'ブログ記事一覧';
        }
      }
    }

    function updateURL(category) {
      const url = new URL(window.location.href);
      if (category && category !== '') {
        url.searchParams.set('category', category);
      } else {
        url.searchParams.delete('category');
      }
      
      window.history.pushState({}, '', url.toString());
    }
  });
</script>
