---
import Layout from '@/layouts/Layout.astro';
import { getEntry } from 'astro:content';
import { promises as fs } from 'fs';
import path from 'path';

// This page should only be available in development
if (import.meta.env.PROD) {
  return new Response(null, {
    status: 404,
    statusText: 'Not found',
  });
}

const { slug } = Astro.params;
if (!slug) {
  return new Response('Slug not provided', { status: 400 });
}

const post = await getEntry('blog', slug);

if (!post) {
  return new Response(`Post with slug ${slug} not found`, { status: 404 });
}

// astro:content does not expose the raw body, so we have to read it from the filesystem
const filePath = path.join(process.cwd(), 'src', 'content', 'blog', `${slug}.mdx`);
const rawContent = await fs.readFile(filePath, 'utf-8');
---

<Layout title={`Editing: ${post.data.title}`}>
  <main class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-2">Editing: {post.data.title}</h1>
    <p class="mb-6 text-gray-500 dark:text-gray-400">Slug: {slug}</p>

    <div class="mb-4">
      <button
        class="bg-blue-600 text-white font-bold py-2 px-4 rounded hover:bg-blue-700 transition-colors"         id="save-btn"
      >
        Save Changes
      </button>
    </div>

    <textarea
      class="w-full h-[60vh] p-4 font-mono bg-gray-100 dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md resize-y"       id="editor"
    >
      {rawContent}
    </textarea>

    <div
      class="mt-6 border-2 border-dashed border-gray-400 dark:border-gray-500 rounded-lg p-8 text-center cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800"       id="dropzone"
    >
      <p class="text-gray-500 dark:text-gray-400">Drag & drop images here to upload</p>
    </div>

    <div class="mt-4 hidden" id="image-options">
      <p class="mb-2">Insert as:</p>
      <button class="bg-gray-200 dark:bg-gray-700 py-1 px-3 rounded mr-2" id="insert-captioned"
        >CaptionedImage</button
      >
      <button class="bg-gray-200 dark:bg-gray-700 py-1 px-3 rounded" id="insert-grid"
        >ImageGrid (coming soon)</button
      >
    </div>
  </main>
  <script define:vars={{ slug }} is:inline>
    const saveBtn = document.getElementById('save-btn');
    const editor = document.getElementById('editor');
    const dropzone = document.getElementById('dropzone');

    // 1. Save Content
    saveBtn.addEventListener('click', async () => {
      saveBtn.textContent = 'Saving...';
      saveBtn.disabled = true;
      try {
        const response = await fetch('/api/save-post', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ slug: slug, content: editor.value }),
        });
        if (!response.ok) {
          throw new Error(`Save failed: ${await response.text()}`);
        }
        alert('Post saved successfully!');
      } catch (error) {
        console.error(error);
        alert(`Error saving post: ${error.message}`);
      } finally {
        saveBtn.textContent = 'Save Changes';
        saveBtn.disabled = false;
      }
    });

    // 2. Image Drag and Drop
    dropzone.addEventListener('dragover', e => {
      e.preventDefault();
      dropzone.classList.add('border-blue-500', 'bg-blue-100', 'dark:bg-blue-900');
    });

    dropzone.addEventListener('dragleave', e => {
      e.preventDefault();
      dropzone.classList.remove('border-blue-500', 'bg-blue-100', 'dark:bg-blue-900');
    });

    dropzone.addEventListener('drop', async e => {
      e.preventDefault();
      dropzone.classList.remove('border-blue-500', 'bg-blue-100', 'dark:bg-blue-900');

      const files = e.dataTransfer.files;
      if (files.length === 0) {
        return;
      }
      const file = files[0];
      // For now, we handle single image upload
      await uploadAndInsertImage(file);
    });

    async function uploadAndInsertImage(file) {
      const formData = new FormData();
      formData.append('image', file);
      formData.append('slug', slug);

      dropzone.textContent = 'Uploading...';

      try {
        const response = await fetch('/api/upload-image', {
          method: 'POST',
          body: formData,
        });

        if (!response.ok) {
          throw new Error(`Upload failed: ${await response.text()}`);
        }

        const result = await response.json();
        const imagePath = result.path;

        // 3. Insert Image
        const altText = prompt('Enter alt text for the image:', '');
        const caption = prompt('Enter a caption for the image (optional):', '');

        // Sanitize the image name to create a valid JS variable name for the import
        const importName = file.name.replace(/[^a-zA-Z0-9]/g, '_').split('.')[0];

        const importStatement = `import ${importName} from '${imagePath}';\\n`;
        let componentTag = `<CaptionedImage src={${importName}} alt="${altText}"`;
        if (caption) {
          componentTag += ` caption="${caption}"`;
        }
        componentTag += ' />\\n';

        // Insert the import statement at the top of the frontmatter
        const frontmatterEnd = editor.value.indexOf('---', 3) + 3;
        const newContent =
          editor.value.slice(0, frontmatterEnd) +
          '\\n' +
          importStatement +
          editor.value.slice(frontmatterEnd);
        editor.value = newContent;

        // Insert component tag at cursor or end
        editor.value += '\\n' + componentTag;

        alert('Image uploaded and inserted!');
      } catch (error) {
        console.error(error);
        alert(`Error uploading image: ${error.message}`);
      } finally {
        dropzone.innerHTML =
          '<p class="text-gray-500 dark:text-gray-400">Drag & drop images here to upload</p>';
      }
    }
  </script>
</Layout>
