---
interface Props {
  headings: Array<{
    depth: number;
    slug: string;
    text: string;
  }>;
}

const { headings } = Astro.props;

// Filter out h1 headings and only show h2, h3, h4
const tocHeadings = headings.filter(heading => heading.depth >= 2 && heading.depth <= 4);
---

{tocHeadings.length > 0 && (
  <div class="lg:block">
    <!-- Mobile TOC - Collapsible -->
    <details class="lg:hidden mb-8 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-sm">
      <summary class="p-4 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors rounded-lg">
        <span class="text-sm font-semibold text-gray-900 dark:text-white flex items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path d="M4 6h16M4 10h16M4 14h16M4 18h16" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/>
          </svg>
          目次
        </span>
      </summary>
      <div class="px-4 pb-4">
        <ul class="space-y-1 text-sm">
          {tocHeadings.map((heading) => (
            <li class:list={`toc-item toc-level-${heading.depth}`}>
              <a
                class="toc-link block py-1 text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-200"                 data-heading-id={heading.slug}                 href={`#${heading.slug}`}
              >
                {heading.text}
              </a>
            </li>
          ))}
        </ul>
      </div>
    </details>

    <!-- Desktop TOC - Sticky Sidebar -->
    <nav class="toc-container hidden lg:block sticky top-8 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4 shadow-sm">
      <h2 class="text-sm font-semibold text-gray-900 dark:text-white mb-3 flex items-center gap-2">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path d="M4 6h16M4 10h16M4 14h16M4 18h16" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/>
        </svg>
        目次
      </h2>
      <ul class="space-y-1 text-sm">
        {tocHeadings.map((heading) => (
          <li class:list={`toc-item toc-level-${heading.depth}`}>
            <a
              class="toc-link block py-1 text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-200"               data-heading-id={heading.slug}               href={`#${heading.slug}`}
            >
              {heading.text}
            </a>
          </li>
        ))}
      </ul>
    </nav>
  </div>
)}

<style>
  .toc-level-2 {
    margin-left: 0;
  }
  
  .toc-level-3 {
    margin-left: 1rem;
  }
  
  .toc-level-4 {
    margin-left: 2rem;
  }
  
  .toc-link.active {
    color: #2563eb;
    font-weight: 500;
  }
  
  :global(.dark) .toc-link.active {
    color: #60a5fa;
  }
  
  .toc-container {
    max-height: calc(100vh - 6rem);
    overflow-y: auto;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const tocLinks = document.querySelectorAll('.toc-link');
    const headings = document.querySelectorAll('h2, h3, h4');
    
    if (tocLinks.length === 0 || headings.length === 0) return;
    
    // Create intersection observer for scroll-linked highlighting
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const id = entry.target.id;
          const tocLink = document.querySelector(`[data-heading-id="${id}"]`);
          
          if (entry.isIntersecting) {
            // Remove active class from all links
            tocLinks.forEach(link => link.classList.remove('active'));
            // Add active class to current link
            if (tocLink) {
              tocLink.classList.add('active');
            }
          }
        });
      },
      {
        rootMargin: '-20% 0% -35% 0%',
        threshold: 0
      }
    );
    
    // Observe all headings
    headings.forEach((heading) => {
      if (heading.id) {
        observer.observe(heading);
      }
    });
    
    // Smooth scroll for TOC links
    tocLinks.forEach((link) => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('data-heading-id');
        
        if (targetId) {
          const targetElement = document.getElementById(targetId);
          
          if (targetElement) {
            const headerOffset = 80; // Account for sticky header
            const elementPosition = targetElement.getBoundingClientRect().top;
            const offsetPosition = elementPosition + window.pageYOffset - headerOffset;
            
            window.scrollTo({
              top: offsetPosition,
              behavior: 'smooth'
            });
          }
        }
      });
    });
  });
</script>