---
interface Props {
  initialContent?: string;
  fileName?: string;
}

const { initialContent = '', fileName = 'new-article' } = Astro.props;

// 開発環境でのみレンダリング
if (import.meta.env.PROD) {
  return new Response(null, { status: 404 });
}
---

<div class="mdx-editor max-w-7xl mx-auto p-4">
  <div class="grid grid-cols-1 xl:grid-cols-3 gap-4 h-screen max-h-[90vh]">
    <!-- Editor Panel -->
    <div class="xl:col-span-2 flex flex-col">
      <div class="mb-4">
        <h2 class="text-xl font-bold mb-2">MDX Editor</h2>

        <!-- File Management -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-2 mb-4">
          <div>
            <label class="block text-sm font-medium mb-1" for="file-name"
              >ファイル名（スラッグ）</label
            >
            <input
              aria-label="記事のファイル名"
              class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
              id="file-name"
              type="text"
              value={fileName}
            />
          </div>
          <div>
            <label class="block text-sm font-medium mb-1" for="publish-date">公開日</label>
            <input
              aria-label="記事の公開日"
              class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
              id="publish-date"
              type="date"
            />
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="grid grid-cols-2 md:grid-cols-4 gap-2 mb-4">
          <button
            class="px-3 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors text-sm"
            id="save-mdx-btn"
          >
            📄 MDX保存
          </button>
          <button
            class="px-3 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors text-sm"
            id="load-btn"
          >
            📂 読込
          </button>
          <button
            class="px-3 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 transition-colors text-sm"
            id="new-btn"
          >
            ✨ 新規
          </button>
          <button
            class="px-3 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors text-sm"
            id="download-btn"
          >
            💾 DL
          </button>
        </div>

        <!-- Image Tools -->
        <div class="grid grid-cols-2 md:grid-cols-4 gap-2 mb-4">
          <button
            class="px-3 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 transition-colors text-sm"
            id="add-image-btn"
          >
            🖼️ 画像追加
          </button>
          <button
            class="px-3 py-2 bg-cyan-600 text-white rounded hover:bg-cyan-700 transition-colors text-sm"
            id="add-captioned-btn"
          >
            📝 キャプション付
          </button>
          <button
            class="px-3 py-2 bg-teal-600 text-white rounded hover:bg-teal-700 transition-colors text-sm"
            id="add-grid-btn"
          >
            🔲 グリッド
          </button>
          <button
            class="px-3 py-2 bg-orange-600 text-white rounded hover:bg-orange-700 transition-colors text-sm"
            id="paste-image-btn"
          >
            📋 貼付
          </button>
        </div>
      </div>

      <!-- Drag & Drop Zone -->
      <div
        class="mb-4 p-4 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg text-center bg-gray-50 dark:bg-gray-800 transition-colors"
        id="drop-zone"
      >
        <p class="text-gray-500 dark:text-gray-400 text-sm">
          📎 ここに画像をドラッグ&ドロップ、またはCtrl+Vで貼り付け
        </p>
      </div>

      <textarea
        class="flex-1 p-4 font-mono text-sm border border-gray-300 dark:border-gray-600 rounded resize-none bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100"
        id="mdx-input"
        placeholder="MDXコンテンツを入力...">{initialContent}</textarea
      >
    </div>

    <!-- Preview Panel -->
    <div class="flex flex-col">
      <div class="mb-4">
        <h2 class="text-xl font-bold mb-2">プレビュー</h2>
        <div class="flex gap-2 mb-2">
          <button
            class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors text-sm"
            id="refresh-btn"
          >
            🔄 更新
          </button>
        </div>
      </div>

      <div
        class="flex-1 p-4 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-900 overflow-auto prose dark:prose-invert max-w-none"
        id="preview-panel"
      >
        <p class="text-gray-500 italic">プレビューがここに表示されます</p>
      </div>
    </div>
  </div>

  <!-- Image Upload Area -->
  <div class="mt-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg" id="uploaded-images">
    <h3 class="text-lg font-semibold mb-2">アップロード済み画像</h3>
    <div class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-2" id="image-gallery">
      <!-- アップロードされた画像がここに表示 -->
    </div>
  </div>

  <!-- Template Modal -->
  <div class="fixed inset-0 bg-black bg-opacity-50 hidden z-50" id="template-modal">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full">
        <h3 class="text-lg font-bold mb-4">新規記事テンプレート</h3>

        <div class="mb-4">
          <label class="block text-sm font-medium mb-2" for="template-category">カテゴリ</label>
          <select
            class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-800"
            id="template-category"
          >
            <option value="写真">写真</option>
            <option value="旅行">旅行</option>
            <option value="競馬">競馬</option>
            <option value="技術">技術</option>
            <option value="ガジェット">ガジェット</option>
            <option value="その他">その他</option>
          </select>
        </div>

        <div class="mb-4">
          <label class="block text-sm font-medium mb-2" for="template-title">記事タイトル</label>
          <input
            aria-label="記事のタイトル"
            class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-800"
            id="template-title"
            placeholder="記事のタイトル"
            type="text"
          />
        </div>

        <div class="mb-4">
          <label class="block text-sm font-medium mb-2" for="template-description">記事の説明</label
          >
          <textarea
            aria-label="記事の説明"
            class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded resize-none bg-white dark:bg-gray-800"
            id="template-description"
            placeholder="記事の簡単な説明"
            rows="2"></textarea>
        </div>

        <div class="flex justify-end gap-2">
          <button
            class="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
            id="cancel-template"
          >
            キャンセル
          </button>
          <button
            class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
            id="apply-template"
          >
            適用
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- CaptionedImage Modal -->
  <div class="fixed inset-0 bg-black bg-opacity-50 hidden z-50" id="captioned-modal">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-lg w-full">
        <h3 class="text-lg font-bold mb-4">CaptionedImage作成</h3>

        <div class="mb-4">
          <label class="block text-sm font-medium mb-2" for="captioned-image-select">画像選択</label
          >
          <select
            class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-800"
            id="captioned-image-select"
          >
            <option value="">画像を選択してください</option>
          </select>
        </div>

        <div class="mb-4">
          <label class="block text-sm font-medium mb-2" for="captioned-alt">Alt テキスト</label>
          <input
            aria-label="画像のAltテキスト"
            class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-800"
            id="captioned-alt"
            placeholder="画像の説明"
            type="text"
          />
        </div>

        <div class="mb-4">
          <label class="block text-sm font-medium mb-2" for="captioned-caption">キャプション</label>
          <textarea
            aria-label="画像のキャプション"
            class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded resize-none bg-white dark:bg-gray-800"
            id="captioned-caption"
            placeholder="画像のキャプション（オプション）"
            rows="2"></textarea>
        </div>

        <div class="flex justify-end gap-2">
          <button
            class="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
            id="cancel-captioned"
          >
            キャンセル
          </button>
          <button
            class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
            id="apply-captioned"
          >
            挿入
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- ImageGrid Modal -->
  <div class="fixed inset-0 bg-black bg-opacity-50 hidden z-50" id="grid-modal">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div
        class="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-2xl w-full max-h-[80vh] overflow-auto"
      >
        <h3 class="text-lg font-bold mb-4">ImageGrid作成</h3>

        <div class="mb-4">
          <label class="block text-sm font-medium mb-2" for="grid-columns">グリッド列数</label>
          <select
            class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-800"
            id="grid-columns"
          >
            <option value="2">2列</option>
            <option value="3">3列</option>
            <option value="4">4列</option>
          </select>
        </div>

        <fieldset class="mb-4">
          <legend class="block text-sm font-medium mb-2">画像選択（複数選択可）</legend>
          <div
            class="max-h-60 overflow-auto border border-gray-300 dark:border-gray-600 rounded p-2 bg-gray-50 dark:bg-gray-900"
            id="grid-image-selection"
          >
            <!-- 画像選択チェックボックス -->
          </div>
        </fieldset>

        <div class="mb-4" id="grid-selected-images">
          <!-- 選択された画像のプレビューとキャプション入力 -->
        </div>

        <div class="flex justify-end gap-2">
          <button
            class="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
            id="cancel-grid"
          >
            キャンセル
          </button>
          <button
            class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
            id="apply-grid"
          >
            挿入
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // MDXエディタの機能
  class MDXEditor {
    input: HTMLTextAreaElement;
    preview: HTMLDivElement;
    fileName: HTMLInputElement;
    publishDate: HTMLInputElement;
    dropZone: HTMLDivElement;
    imageGallery: HTMLDivElement;
    templateModal: HTMLDivElement;
    captionedModal: HTMLDivElement;
    gridModal: HTMLDivElement;
    uploadedImages: Array<{ name: string; url: string; file: File }>;

    constructor() {
      this.input = document.getElementById('mdx-input') as HTMLTextAreaElement;
      this.preview = document.getElementById('preview-panel') as HTMLDivElement;
      this.fileName = document.getElementById('file-name') as HTMLInputElement;
      this.publishDate = document.getElementById('publish-date') as HTMLInputElement;
      this.dropZone = document.getElementById('drop-zone') as HTMLDivElement;
      this.imageGallery = document.getElementById('image-gallery') as HTMLDivElement;

      // Modals
      this.templateModal = document.getElementById('template-modal') as HTMLDivElement;
      this.captionedModal = document.getElementById('captioned-modal') as HTMLDivElement;
      this.gridModal = document.getElementById('grid-modal') as HTMLDivElement;

      // 画像管理
      this.uploadedImages = [];

      this.initEventListeners();
      this.loadFromLocalStorage();
      this.setDefaultDate();
    }

    setDefaultDate() {
      if (!this.publishDate.value) {
        const today = new Date().toISOString().split('T')[0];
        this.publishDate.value = today;
      }
    }

    initEventListeners() {
      // リアルタイムプレビュー
      this.input.addEventListener('input', () => {
        this.updatePreview();
        this.saveToLocalStorage();
      });

      // ボタンイベント
      document
        .getElementById('save-mdx-btn')
        ?.addEventListener('click', () => this.saveMDXToProject());
      document.getElementById('download-btn')?.addEventListener('click', () => this.downloadFile());
      document.getElementById('load-btn')?.addEventListener('click', () => this.loadFile());
      document.getElementById('new-btn')?.addEventListener('click', () => this.newFile());
      document.getElementById('refresh-btn')?.addEventListener('click', () => this.updatePreview());

      // 画像ツール
      document
        .getElementById('add-image-btn')
        ?.addEventListener('click', () => this.addImageInput());
      document
        .getElementById('add-captioned-btn')
        ?.addEventListener('click', () => this.openCaptionedModal());
      document
        .getElementById('add-grid-btn')
        ?.addEventListener('click', () => this.openGridModal());
      document
        .getElementById('paste-image-btn')
        ?.addEventListener('click', () => this.pasteImage());

      // テンプレートモーダル
      document
        .getElementById('apply-template')
        ?.addEventListener('click', () => this.applyTemplate());
      document
        .getElementById('cancel-template')
        ?.addEventListener('click', () => this.closeModal('template-modal'));

      // CaptionedImage モーダル
      document
        .getElementById('apply-captioned')
        ?.addEventListener('click', () => this.applyCaptionedImage());
      document
        .getElementById('cancel-captioned')
        ?.addEventListener('click', () => this.closeModal('captioned-modal'));

      // ImageGrid モーダル
      document.getElementById('apply-grid')?.addEventListener('click', () => this.applyImageGrid());
      document
        .getElementById('cancel-grid')
        ?.addEventListener('click', () => this.closeModal('grid-modal'));

      // ファイル名・日付変更時の自動保存
      this.fileName.addEventListener('change', () => this.saveToLocalStorage());
      this.publishDate.addEventListener('change', () => this.saveToLocalStorage());

      // ドラッグ&ドロップ
      this.initDragAndDrop();

      // クリップボード貼り付け
      this.initClipboardPaste();
    }

    initDragAndDrop() {
      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        this.dropZone.addEventListener(eventName, e => e.preventDefault());
        document.body.addEventListener(eventName, e => e.preventDefault());
      });

      ['dragenter', 'dragover'].forEach(eventName => {
        this.dropZone.addEventListener(eventName, () => {
          this.dropZone.classList.add('border-blue-400', 'bg-blue-50', 'dark:bg-blue-900');
        });
      });

      ['dragleave', 'drop'].forEach(eventName => {
        this.dropZone.addEventListener(eventName, () => {
          this.dropZone.classList.remove('border-blue-400', 'bg-blue-50', 'dark:bg-blue-900');
        });
      });

      this.dropZone.addEventListener('drop', e => {
        const files = Array.from(e.dataTransfer?.files || []);
        this.handleFiles(files as File[]);
      });
    }

    initClipboardPaste() {
      document.addEventListener('paste', e => {
        const items = Array.from(e.clipboardData?.items || []);
        const imageItems = items.filter(item => item.type.indexOf('image') === 0);

        imageItems.forEach(item => {
          const file = item.getAsFile();
          if (file) {
            this.handleFiles([file]);
          }
        });
      });
    }

    handleFiles(files: File[]) {
      files.forEach(file => {
        if (file.type.startsWith('image/')) {
          this.addImageToGallery(file);
        }
      });
    }

    addImageToGallery(file: File) {
      // ファイル名のサニタイズ
      const sanitizedName = file.name.replace(/[^a-zA-Z0-9.-]/g, '_');
      const timestamp = Date.now();
      const finalName = `${timestamp}_${sanitizedName}`;

      const url = URL.createObjectURL(file);

      this.uploadedImages.push({
        name: finalName,
        url: url,
        file: file,
      });

      // ギャラリーに表示
      const imageDiv = document.createElement('div');
      imageDiv.className = 'relative group cursor-pointer';
      imageDiv.innerHTML = `
        <img src="${url}" alt="${finalName}" class="w-full h-20 object-cover rounded border hover:shadow-md transition-shadow">
        <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-opacity rounded flex items-center justify-center">
          <button class="text-white opacity-0 group-hover:opacity-100 transition-opacity bg-red-500 rounded-full p-1 text-xs" onclick="window.mdxEditor.removeImage('${finalName}')">×</button>
        </div>
        <p class="text-xs mt-1 truncate" title="${finalName}">${finalName}</p>
      `;

      imageDiv.addEventListener('click', () => {
        this.insertImageReference(finalName);
      });

      this.imageGallery.appendChild(imageDiv);
      this.updateImageSelects();
      this.saveToLocalStorage();
    }

    removeImage(imageName: string) {
      const index = this.uploadedImages.findIndex(img => img.name === imageName);
      if (index !== -1) {
        URL.revokeObjectURL(this.uploadedImages[index].url);
        this.uploadedImages.splice(index, 1);
        this.refreshImageGallery();
        this.updateImageSelects();
        this.saveToLocalStorage();
      }
    }

    refreshImageGallery() {
      this.imageGallery.innerHTML = '';
      this.uploadedImages.forEach(image => {
        const imageDiv = document.createElement('div');
        imageDiv.className = 'relative group cursor-pointer';
        imageDiv.innerHTML = `
          <img src="${image.url}" alt="${image.name}" class="w-full h-20 object-cover rounded border hover:shadow-md transition-shadow">
          <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-opacity rounded flex items-center justify-center">
            <button class="text-white opacity-0 group-hover:opacity-100 transition-opacity bg-red-500 rounded-full p-1 text-xs" onclick="window.mdxEditor.removeImage('${image.name}')">×</button>
          </div>
          <p class="text-xs mt-1 truncate" title="${image.name}">${image.name}</p>
        `;

        imageDiv.addEventListener('click', () => {
          this.insertImageReference(image.name);
        });

        this.imageGallery.appendChild(imageDiv);
      });
    }

    updateImageSelects() {
      // CaptionedImage用の選択肢更新
      const captionedSelect = document.getElementById(
        'captioned-image-select'
      ) as HTMLSelectElement;
      captionedSelect.innerHTML = '<option value="">画像を選択してください</option>';

      // ImageGrid用の選択肢更新
      const gridSelection = document.getElementById('grid-image-selection') as HTMLDivElement;
      gridSelection.innerHTML = '';

      this.uploadedImages.forEach(image => {
        // CaptionedImage用
        const option = document.createElement('option');
        option.value = image.name;
        option.textContent = image.name;
        captionedSelect.appendChild(option);

        // ImageGrid用
        const checkbox = document.createElement('div');
        checkbox.className = 'flex items-center space-x-2 p-2';
        checkbox.innerHTML = `
          <input type="checkbox" id="grid-${image.name}" value="${image.name}" class="rounded">
          <img src="${image.url}" alt="${image.name}" class="w-12 h-12 object-cover rounded">
          <label for="grid-${image.name}" class="text-sm cursor-pointer flex-1">${image.name}</label>
        `;
        gridSelection.appendChild(checkbox);
      });

      // ImageGridのチェックボックス変更イベント
      gridSelection.addEventListener('change', () => this.updateGridSelectedImages());
    }

    updateGridSelectedImages() {
      const checkboxes = document.querySelectorAll(
        '#grid-image-selection input[type="checkbox"]:checked'
      );
      const selectedDiv = document.getElementById('grid-selected-images') as HTMLDivElement;

      selectedDiv.innerHTML = '';

      if (checkboxes.length > 0) {
        selectedDiv.innerHTML =
          '<h4 class="font-semibold mb-2">選択された画像のキャプション：</h4>';

        checkboxes.forEach(checkbox => {
          const imageName = (checkbox as HTMLInputElement).value;
          const image = this.uploadedImages.find(img => img.name === imageName);

          if (image) {
            const captionDiv = document.createElement('div');
            captionDiv.className = 'flex items-start space-x-2 mb-2 p-2 border rounded';
            captionDiv.innerHTML = `
              <img src="${image.url}" alt="${image.name}" class="w-16 h-16 object-cover rounded">
              <div class="flex-1">
                <p class="text-sm font-medium mb-1">${image.name}</p>
                <input type="text" placeholder="Alt text" data-image="${imageName}" data-type="alt" class="w-full p-1 mb-1 text-xs border rounded">
                <input type="text" placeholder="Caption (optional)" data-image="${imageName}" data-type="caption" class="w-full p-1 text-xs border rounded">
              </div>
            `;
            selectedDiv.appendChild(captionDiv);
          }
        });
      }
    }

    insertImageReference(imageName: string) {
      const cursorPos = this.input.selectionStart;
      const textBefore = this.input.value.substring(0, cursorPos);
      const textAfter = this.input.value.substring(cursorPos);

      const imageRef = `![Image](./images/${imageName})`;

      this.input.value = textBefore + imageRef + textAfter;
      this.input.selectionStart = this.input.selectionEnd = cursorPos + imageRef.length;

      this.updatePreview();
      this.saveToLocalStorage();
    }

    addImageInput() {
      const input = document.createElement('input');
      input.type = 'file';
      input.accept = 'image/*';
      input.multiple = true;
      input.onchange = e => {
        const files = Array.from((e.target as HTMLInputElement).files || []);
        this.handleFiles(files as File[]);
      };
      input.click();
    }

    pasteImage() {
      navigator.clipboard
        .read()
        .then(items => {
          items.forEach(item => {
            const imageTypes = item.types.filter(type => type.startsWith('image/'));
            imageTypes.forEach(type => {
              item.getType(type).then(blob => {
                const file = new File([blob], `pasted-${Date.now()}.png`, { type: type });
                this.handleFiles([file]);
              });
            });
          });
        })
        .catch(() => {
          alert('クリップボードからの画像貼り付けに失敗しました。Ctrl+Vを使用してください。');
        });
    }

    openCaptionedModal() {
      if (this.uploadedImages.length === 0) {
        alert('まず画像をアップロードしてください。');
        return;
      }
      this.captionedModal.classList.remove('hidden');
    }

    openGridModal() {
      if (this.uploadedImages.length === 0) {
        alert('まず画像をアップロードしてください。');
        return;
      }
      this.gridModal.classList.remove('hidden');
      this.updateImageSelects();
    }

    applyCaptionedImage() {
      const imageSelect = document.getElementById('captioned-image-select') as HTMLSelectElement;
      const altInput = document.getElementById('captioned-alt') as HTMLInputElement;
      const captionInput = document.getElementById('captioned-caption') as HTMLTextAreaElement;

      if (!imageSelect.value) {
        alert('画像を選択してください。');
        return;
      }

      if (!altInput.value.trim()) {
        alert('Alt テキストを入力してください。');
        return;
      }

      const cursorPos = this.input.selectionStart;
      const textBefore = this.input.value.substring(0, cursorPos);
      const textAfter = this.input.value.substring(cursorPos);

      let component = `<CaptionedImage\n  src="./images/${imageSelect.value}"\n  alt="${altInput.value.trim()}"`;

      if (captionInput.value.trim()) {
        component += `\n  caption="${captionInput.value.trim()}"`;
      }

      component += '\n/>\n';

      this.input.value = textBefore + component + textAfter;
      this.updatePreview();
      this.saveToLocalStorage();

      // モーダルを閉じてリセット
      this.closeModal('captioned-modal');
      imageSelect.value = '';
      altInput.value = '';
      captionInput.value = '';
    }

    applyImageGrid() {
      const columnsSelect = document.getElementById('grid-columns') as HTMLSelectElement;
      const selectedInputs = document.querySelectorAll('#grid-selected-images input');

      if (selectedInputs.length === 0) {
        alert('画像を選択してください。');
        return;
      }

      const images: Array<{ src: string; alt: string; caption?: string }> = [];
      const imageNames = new Set();

      selectedInputs.forEach(input => {
        const inputEl = input as HTMLInputElement;
        const imageName = inputEl.dataset.image;
        const type = inputEl.dataset.type;

        if (imageName && type) {
          imageNames.add(imageName);
        }
      });

      imageNames.forEach(imageName => {
        const altInput = document.querySelector(
          `[data-image="${imageName}"][data-type="alt"]`
        ) as HTMLInputElement;
        const captionInput = document.querySelector(
          `[data-image="${imageName}"][data-type="caption"]`
        ) as HTMLInputElement;

        if (altInput && altInput.value.trim()) {
          const imageData: any = {
            src: `./images/${imageName}`,
            alt: altInput.value.trim(),
          };

          if (captionInput && captionInput.value.trim()) {
            imageData.caption = captionInput.value.trim();
          }

          images.push(imageData);
        }
      });

      if (images.length === 0) {
        alert('Alt テキストを入力してください。');
        return;
      }

      const cursorPos = this.input.selectionStart;
      const textBefore = this.input.value.substring(0, cursorPos);
      const textAfter = this.input.value.substring(cursorPos);

      let component = `<ImageGrid\n  columns={${columnsSelect.value}}\n  images={[\n`;

      images.forEach((img, index) => {
        component += `    {\n      src: "${img.src}",\n      alt: "${img.alt}"`;
        if (img.caption) {
          component += `,\n      caption: "${img.caption}"`;
        }
        component += '\n    }' + (index < images.length - 1 ? ',' : '') + '\n';
      });

      component += '  ]}\n/>\n';

      this.input.value = textBefore + component + textAfter;
      this.updatePreview();
      this.saveToLocalStorage();

      // モーダルを閉じてリセット
      this.closeModal('grid-modal');
      document.querySelectorAll('#grid-image-selection input[type="checkbox"]').forEach(cb => {
        (cb as HTMLInputElement).checked = false;
      });
      this.updateGridSelectedImages();
    }

    updatePreview() {
      const content = this.input.value;

      // 簡単なMDX→HTMLプレビュー変換
      let html = content
        // フロントマター除去
        .replace(/^---[\s\S]*?---\n?/, '')
        // コンポーネント（簡易対応）
        .replace(
          /<CaptionedImage[\s\S]*?\/>/g,
          '<div class="bg-blue-100 dark:bg-blue-800 p-4 rounded border-l-4 border-blue-500"><strong>CaptionedImage</strong><br>プレビューでは表示されません</div>'
        )
        .replace(
          /<ImageGrid[\s\S]*?\/>/g,
          '<div class="bg-green-100 dark:bg-green-800 p-4 rounded border-l-4 border-green-500"><strong>ImageGrid</strong><br>プレビューでは表示されません</div>'
        )
        // 見出し
        .replace(/^### (.*$)/gim, '<h3>$1</h3>')
        .replace(/^## (.*$)/gim, '<h2>$1</h2>')
        .replace(/^# (.*$)/gim, '<h1>$1</h1>')
        // リンク
        .replace(
          /\[([^\]]+)\]\(([^\)]+)\)/g,
          '<a href="$2" class="text-blue-600 hover:underline">$1</a>'
        )
        // 太字・斜体
        .replace(/\*\*([^*]+)\*\*/g, '<strong>$1</strong>')
        .replace(/\*([^*]+)\*/g, '<em>$1</em>')
        // 画像
        .replace(
          /!\[([^\]]*)\]\(([^)]+)\)/g,
          "<img src=\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='300' height='200'%3E%3Crect width='100%25' height='100%25' fill='%23ddd'/%3E%3Ctext x='50%25' y='50%25' text-anchor='middle' dy='.3em' fill='%23666'%3E$1%3C/text%3E%3C/svg%3E\" alt=\"$1\" class=\"max-w-full h-auto rounded border\">"
        )
        // コードブロック
        .replace(
          /```(\w+)?\n([\s\S]*?)```/g,
          '<pre class="bg-gray-100 dark:bg-gray-800 p-4 rounded overflow-x-auto"><code>$2</code></pre>'
        )
        // インラインコード
        .replace(/`([^`]+)`/g, '<code class="bg-gray-100 dark:bg-gray-800 px-1 rounded">$1</code>')
        // 改行
        .replace(/\n\n/g, '</p><p>')
        .replace(/\n/g, '<br>');

      // 段落で囲む
      if (html && !html.startsWith('<')) {
        html = '<p>' + html + '</p>';
      }

      this.preview.innerHTML =
        html || '<p class="text-gray-500 italic">プレビューがここに表示されます</p>';
    }

    getArticleDirectory() {
      const date = this.publishDate.value;
      if (!date) return null;

      const [year, month] = date.split('-');
      return `${year}-${month}/${date}`;
    }

    async saveMDXToProject() {
      const articleDir = this.getArticleDirectory();
      const fileName = this.fileName.value;

      if (!articleDir || !fileName) {
        alert('公開日とファイル名を入力してください。');
        return;
      }

      // ディレクトリ構造を示すZIPファイルを作成
      const zip = await this.createProjectZip(articleDir, fileName);

      // ZIPファイルをダウンロード
      const zipBlob = await zip.generateAsync({ type: 'blob' });
      const url = URL.createObjectURL(zipBlob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${fileName}-${articleDir.replace('/', '-')}.zip`;
      a.click();
      URL.revokeObjectURL(url);

      alert(
        `プロジェクトファイルをダウンロードしました。\n解凍後、以下のパスに配置してください：\nsrc/content/blog/${articleDir}/`
      );
    }

    async createProjectZip(articleDir: string, fileName: string) {
      // 動的にJSZipをインポート（CDNから）
      const JSZip = await this.loadJSZip();
      const zip = new JSZip();

      // ルートフォルダを作成
      const rootFolder = zip.folder(`${fileName}-${articleDir.replace('/', '-')}`);

      // README.md を作成
      const readmeContent = `# ${fileName}

## 配置方法

このフォルダの内容を以下のパスにコピーしてください：

\`\`\`
src/content/blog/${articleDir}/
\`\`\`

## ファイル構成

- ${fileName}.mdx - メイン記事ファイル
- images/ - 記事で使用する画像ファイル

## 次のステップ

1. ファイルを適切なパスに配置
2. 画像パスが正しいかを確認
3. \`npm run dev\` で開発サーバーを起動して確認
`;
      rootFolder?.file('README.md', readmeContent);

      // MDXファイルを追加
      rootFolder?.file(`${fileName}.mdx`, this.input.value);

      // 画像フォルダを作成
      const imageFolder = rootFolder?.folder('images');

      // アップロードされた画像を追加
      for (const image of this.uploadedImages) {
        imageFolder?.file(image.name, image.file);
      }

      return zip;
    }

    async loadJSZip() {
      // JSZipをCDNから動的ロード
      if (!(window as any).JSZip) {
        const script = document.createElement('script');
        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js';
        document.head.appendChild(script);

        await new Promise(resolve => {
          script.onload = resolve;
        });
      }

      return (window as any).JSZip;
    }

    downloadFile() {
      const content = this.input.value;
      const filename = this.fileName.value || 'article';

      const blob = new Blob([content], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${filename}.mdx`;
      a.click();
      URL.revokeObjectURL(url);
    }

    loadFile() {
      const input = document.createElement('input');
      input.type = 'file';
      input.accept = '.mdx,.md';
      input.onchange = e => {
        const file = (e.target as HTMLInputElement).files?.[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = e => {
            this.input.value = e.target?.result as string;
            this.fileName.value = file.name.replace(/\.(mdx?|md)$/, '');
            this.updatePreview();
            this.saveToLocalStorage();
          };
          reader.readAsText(file);
        }
      };
      input.click();
    }

    newFile() {
      this.templateModal.classList.remove('hidden');
    }

    closeModal(modalId: string) {
      document.getElementById(modalId)?.classList.add('hidden');
    }

    applyTemplate() {
      const category = (document.getElementById('template-category') as HTMLSelectElement).value;
      const title = (document.getElementById('template-title') as HTMLInputElement).value;
      const description = (document.getElementById('template-description') as HTMLTextAreaElement)
        .value;

      const today = new Date().toISOString().split('T')[0];
      this.publishDate.value = today;

      const template = `---
title: '${title || '新しい記事'}'
description: '${description || '記事の説明'}'
pubDate: '${today}'
heroImage: './images/hero-image.jpg' # オプション
category: '${category}'
---

# ${title || '新しい記事'}

記事の内容をここに書いてください。

## セクション見出し

- リスト項目1
- リスト項目2  
- リスト項目3

**太字のテキスト** と *斜体のテキスト*

\`インラインコード\` の例

\`\`\`javascript
// コードブロックの例
console.log('Hello, World!');
\`\`\`

[リンクの例](https://example.com)

## 画像の例

![画像の説明](./images/sample.jpg)

<CaptionedImage
  src="./images/sample.jpg"
  alt="キャプション付き画像の説明"
  caption="この画像にはキャプションが付いています"
/>

<ImageGrid
  columns={2}
  images={[
    {
      src: "./images/image1.jpg",
      alt: "画像1の説明",
      caption: "画像1のキャプション"
    },
    {
      src: "./images/image2.jpg", 
      alt: "画像2の説明",
      caption: "画像2のキャプション"
    }
  ]}
/>
`;

      this.input.value = template;
      this.fileName.value =
        title
          .toLowerCase()
          .replace(/[^\w\s-]/g, '')
          .replace(/\s+/g, '-') || 'new-article';
      this.updatePreview();
      this.saveToLocalStorage();
      this.closeModal('template-modal');
    }

    saveToLocalStorage() {
      const data = {
        content: this.input.value,
        fileName: this.fileName.value,
        publishDate: this.publishDate.value,
        images: this.uploadedImages.map((img: { name: string; url: string; file: File }) => ({
          name: img.name,
          url: img.url,
          // fileは保存できないので除外
        })),
      };

      localStorage.setItem('mdx-editor-data', JSON.stringify(data));
    }

    loadFromLocalStorage() {
      const savedData = localStorage.getItem('mdx-editor-data');

      if (savedData) {
        try {
          const data = JSON.parse(savedData);

          if (data.content) {
            this.input.value = data.content;
            this.updatePreview();
          }
          if (data.fileName) {
            this.fileName.value = data.fileName;
          }
          if (data.publishDate) {
            this.publishDate.value = data.publishDate;
          }

          // 画像は復元できないので、ギャラリーをクリア
          this.uploadedImages = [];
          this.imageGallery.innerHTML =
            '<p class="text-gray-500 text-sm col-span-full">画像は再アップロードしてください</p>';
        } catch (e) {
          console.error('LocalStorageからの読み込みエラー:', e);
        }
      }
    }
  }

  // エディタ初期化
  const editor = new MDXEditor();
  (window as any).mdxEditor = editor; // グローバルアクセス用
</script>
